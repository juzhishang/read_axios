{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///axios.min.js","webpack:///webpack/bootstrap 109d507a3bc681fb3aa1","webpack:///./index.js","webpack:///./lib/axios.js","webpack:///./lib/utils.js","webpack:///./lib/helpers/bind.js","webpack:///./lib/core/Axios.js","webpack:///./lib/helpers/buildURL.js","webpack:///./lib/core/InterceptorManager.js","webpack:///./lib/core/dispatchRequest.js","webpack:///./lib/core/transformData.js","webpack:///./lib/cancel/isCancel.js","webpack:///./lib/defaults.js","webpack:///./lib/helpers/normalizeHeaderName.js","webpack:///./lib/adapters/xhr.js","webpack:///./lib/core/settle.js","webpack:///./lib/core/createError.js","webpack:///./lib/core/enhanceError.js","webpack:///./lib/core/buildFullPath.js","webpack:///./lib/helpers/isAbsoluteURL.js","webpack:///./lib/helpers/combineURLs.js","webpack:///./lib/helpers/parseHeaders.js","webpack:///./lib/helpers/isURLSameOrigin.js","webpack:///./lib/helpers/cookies.js","webpack:///./lib/core/mergeConfig.js","webpack:///./lib/cancel/Cancel.js","webpack:///./lib/cancel/CancelToken.js","webpack:///./lib/helpers/spread.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","createInstance","defaultConfig","context","Axios","instance","bind","prototype","request","utils","extend","mergeConfig","defaults","axios","create","instanceConfig","Cancel","CancelToken","isCancel","all","promises","Promise","spread","default","isArray","val","toString","isUndefined","isBuffer","constructor","isArrayBuffer","isFormData","FormData","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isObject","isDate","isFile","isBlob","isFunction","isStream","pipe","isURLSearchParams","URLSearchParams","trim","str","replace","isStandardBrowserEnv","navigator","product","window","document","forEach","obj","fn","i","l","length","key","Object","hasOwnProperty","merge","assignValue","arguments","deepMerge","a","b","thisArg","args","Array","apply","interceptors","InterceptorManager","response","buildURL","dispatchRequest","config","url","method","toLowerCase","chain","undefined","promise","resolve","interceptor","unshift","fulfilled","rejected","push","then","shift","getUri","params","paramsSerializer","data","encode","encodeURIComponent","serializedParams","parts","v","toISOString","JSON","stringify","join","hashmarkIndex","indexOf","slice","handlers","use","eject","h","throwIfCancellationRequested","cancelToken","throwIfRequested","transformData","headers","transformRequest","common","adapter","transformResponse","reason","reject","fns","value","__CANCEL__","setContentTypeIfUnset","getDefaultAdapter","XMLHttpRequest","process","normalizeHeaderName","DEFAULT_CONTENT_TYPE","Content-Type","parse","e","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","status","Accept","normalizedName","name","toUpperCase","settle","buildFullPath","parseHeaders","isURLSameOrigin","createError","requestData","requestHeaders","auth","username","password","Authorization","btoa","fullPath","baseURL","open","onreadystatechange","readyState","responseURL","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","statusText","onabort","onerror","ontimeout","timeoutErrorMessage","cookies","xsrfValue","withCredentials","read","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","abort","send","enhanceError","message","code","error","Error","isAxiosError","toJSON","description","number","fileName","lineNumber","columnNumber","stack","isAbsoluteURL","combineURLs","requestedURL","test","relativeURL","ignoreDuplicateOf","parsed","split","line","substr","concat","resolveURL","href","msie","urlParsingNode","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","originURL","userAgent","createElement","location","requestURL","write","expires","path","domain","secure","cookie","Date","toGMTString","match","RegExp","decodeURIComponent","remove","now","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","prop","axiosKeys","otherKeys","keys","filter","executor","TypeError","resolvePromise","token","source","callback","arr"],"mappings":"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","file":"axios.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axios\"] = factory();\n\telse\n\t\troot[\"axios\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"axios\"] = factory();\n\telse\n\t\troot[\"axios\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// 工具方法\n\tvar utils = __webpack_require__(2);\n\t// 辅助方法bind，就是自定义bind方法\n\tvar bind = __webpack_require__(3);\n\t// 核心代码\n\tvar Axios = __webpack_require__(4);\n\t// 一个用于合并配置项的方法\n\tvar mergeConfig = __webpack_require__(22);\n\t// 实例默认配置\n\tvar defaults = __webpack_require__(10);\n\t\n\t/**\n\t * 用于创建Axios实例\n\t * 这个实例的核心是Axios.prototype.request方法，经过修正，它的this指向了Axios的实例context\n\t * 通过两次复制继承，这个实例继承了Axios.prototype上的属性和方法，也继承了context上的属性\n\t *\n\t * @param {Object} defaultConfig 实例的默认配置\n\t * @return {Axios} Axios实例\n\t */\n\tfunction createInstance(defaultConfig) {\n\t  // 创建上下文this\n\t  var context = new Axios(defaultConfig);\n\t  // Axios.prototype.request的this强制绑定到context\n\t  var instance = bind(Axios.prototype.request, context);\n\t\n\t  // 遍历axios.prototype上的属性一一继承给instanceinstance，同时如果属性是方法的话，要修正this指向\n\t  utils.extend(instance, Axios.prototype, context);\n\t\n\t  // 遍历上下文上的属性一一继承给实例instance\n\t  utils.extend(instance, context);\n\t\n\t  return instance;\n\t}\n\t\n\t// 根据默认配置创建要被导出的axios实例\n\tvar axios = createInstance(defaults);\n\t\n\t// Expose Axios class to allow class inheritance\n\t// 为实例添加Axios属性，它是Axios构造器的引用\n\taxios.Axios = Axios;\n\t\n\t// Factory for creating new instances\n\t// 为实例添加create方法，它根据配置项生成一个新的实例\n\taxios.create = function create(instanceConfig) {\n\t  // mergeConfig是合并后的配置项\n\t  // 返回根据新配置生成的axios实例\n\t  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n\t};\n\t\n\t// Expose Cancel & CancelToken\n\t// 为实例添加取消相关的属性或方法\n\taxios.Cancel = __webpack_require__(23);\n\taxios.CancelToken = __webpack_require__(24);\n\taxios.isCancel = __webpack_require__(9);\n\t\n\t// Expose all/spread\n\t// 为实例添加all和spread方法\n\taxios.all = function all(promises) {\n\t  // 直接使用了Promise.all\n\t  return Promise.all(promises);\n\t};\n\t// 一个高阶函数，入参回调函数，返回参数为数组的包装函数，这个函数使用apply方式调用该回调函数，\n\t// 同时把数组作为参数传入。所以数组会被展开作为实参传给回调函数\n\taxios.spread = __webpack_require__(25);\n\t\n\t\n\tmodule.exports = axios;\n\t\n\t// Allow use of default import syntax in TypeScript\n\tmodule.exports.default = axios;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar bind = __webpack_require__(3);\n\t\n\t/*global toString:true*/\n\t\n\t// utils is a library of generic helper functions non-specific to axios\n\t\n\tvar toString = Object.prototype.toString;\n\t\n\t/**\n\t * 判断是否是一个数组\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is an Array, otherwise false\n\t */\n\tfunction isArray(val) {\n\t  return toString.call(val) === '[object Array]';\n\t}\n\t\n\t/**\n\t * 判断值是否为undefined\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if the value is undefined, otherwise false\n\t */\n\tfunction isUndefined(val) {\n\t  return typeof val === 'undefined';\n\t}\n\t\n\t/**\n\t * 判断是否是一个buffer，通过调用值的构造器上的isBuffer函数判断\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Buffer, otherwise false\n\t */\n\tfunction isBuffer(val) {\n\t  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n\t    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n\t}\n\t\n\t/**\n\t * 判断是否是ArrayBuffer\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n\t */\n\tfunction isArrayBuffer(val) {\n\t  return toString.call(val) === '[object ArrayBuffer]';\n\t}\n\t\n\t/**\n\t * 判断值是否是一个FormData\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is an FormData, otherwise false\n\t */\n\tfunction isFormData(val) {\n\t  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n\t}\n\t\n\t/**\n\t * 判断是否是ArrayBuffer View\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n\t */\n\tfunction isArrayBufferView(val) {\n\t  var result;\n\t  // 优先使用ArrayBuffer.isView判断\n\t  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n\t    result = ArrayBuffer.isView(val);\n\t  } else {\n\t    // 如果不符合第一个判断条件，判断val.buffer是否是ArrayBuffer的实例\n\t    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Determine if a value is a String\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a String, otherwise false\n\t */\n\tfunction isString(val) {\n\t  return typeof val === 'string';\n\t}\n\t\n\t/**\n\t * Determine if a value is a Number\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Number, otherwise false\n\t */\n\tfunction isNumber(val) {\n\t  return typeof val === 'number';\n\t}\n\t\n\t/**\n\t * 判断是否是一个对象，需要排除null\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is an Object, otherwise false\n\t */\n\tfunction isObject(val) {\n\t  return val !== null && typeof val === 'object';\n\t}\n\t\n\t/**\n\t * 判断是否是日期对象\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Date, otherwise false\n\t */\n\tfunction isDate(val) {\n\t  return toString.call(val) === '[object Date]';\n\t}\n\t\n\t/**\n\t * 判断是否是文件\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a File, otherwise false\n\t */\n\tfunction isFile(val) {\n\t  return toString.call(val) === '[object File]';\n\t}\n\t\n\t/**\n\t * 判断是否是一个Blob\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Blob, otherwise false\n\t */\n\tfunction isBlob(val) {\n\t  return toString.call(val) === '[object Blob]';\n\t}\n\t\n\t/**\n\t * 判断是否是一个函数\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Function, otherwise false\n\t */\n\tfunction isFunction(val) {\n\t  return toString.call(val) === '[object Function]';\n\t}\n\t\n\t/**\n\t * 判断是否是一个Stream\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a Stream, otherwise false\n\t */\n\tfunction isStream(val) {\n\t  return isObject(val) && isFunction(val.pipe);\n\t}\n\t\n\t/**\n\t * 判断是否是一个URLSearchParams实例，URLSearchParams实例提供了一些查询参数相关的方法\n\t *\n\t * @param {Object} val The value to test\n\t * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n\t */\n\tfunction isURLSearchParams(val) {\n\t  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n\t}\n\t\n\t/**\n\t * 去两端空格\n\t *\n\t * @param {String} str The String to trim\n\t * @returns {String} The String freed of excess whitespace\n\t */\n\tfunction trim(str) {\n\t  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n\t}\n\t\n\t/**\n\t * 判断是否是标准浏览器环境\n\t *\n\t * This allows axios to run in a web worker, and react-native.\n\t * Both environments support XMLHttpRequest, but not fully standard globals.\n\t *\n\t * web workers:\n\t *  typeof window -> undefined\n\t *  typeof document -> undefined\n\t *\n\t * react-native:\n\t *  navigator.product -> 'ReactNative'\n\t * nativescript\n\t *  navigator.product -> 'NativeScript' or 'NS'\n\t */\n\tfunction isStandardBrowserEnv() {\n\t  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n\t                                           navigator.product === 'NativeScript' ||\n\t                                           navigator.product === 'NS')) {\n\t    return false;\n\t  }\n\t  return (\n\t    typeof window !== 'undefined' &&\n\t    typeof document !== 'undefined'\n\t  );\n\t}\n\t\n\t/**\n\t * 对数组上的每一个元素，或者对象上的每一个自有属性，遍历调用fn\n\t * 给fn传三个参数：值、下标（健）、数组（对象）本身\n\t *\n\t * @param {Object|Array} obj 对象或数组\n\t * @param {Function} fn 要调用的函数\n\t */\n\tfunction forEach(obj, fn) {\n\t  // obj不能为null或者undefined\n\t  if (obj === null || typeof obj === 'undefined') {\n\t    return;\n\t  }\n\t\n\t  // 如果不是对象或者数组，转为数组（用[]包裹）\n\t  if (typeof obj !== 'object') {\n\t    /*eslint no-param-reassign:0*/\n\t    obj = [obj];\n\t  }\n\t\n\t  // 迭代数组\n\t  if (isArray(obj)) {\n\t    // 遍历调用fn,参数为数组的值、下标以及数组本身\n\t    for (var i = 0, l = obj.length; i < l; i++) {\n\t      fn.call(null, obj[i], i, obj);\n\t    }\n\t  } else {\n\t    // 迭代对象\n\t    for (var key in obj) {\n\t      // 对对象上的每一个自有属性，分别调用fn,传入的参数为值、健、对象本身\n\t      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t        fn.call(null, obj[key], key, obj);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Accepts varargs expecting each argument to be an object, then\n\t * immutably merges the properties of each object and returns result.\n\t *\n\t * When multiple objects contain the same key the later object in\n\t * the arguments list will take precedence.\n\t *\n\t * Example:\n\t *\n\t * ```js\n\t * var result = merge({foo: 123}, {foo: 456});\n\t * console.log(result.foo); // outputs 456\n\t * ```\n\t *\n\t * @param {Object} obj1 ... 它接收不限数个对象\n\t * @returns {Object} 返回多个对象合并的结果\n\t */\n\tfunction merge(/* obj1, obj2, obj3, ... */) {\n\t  var result = {};\n\t  function assignValue(val, key) {\n\t    if (typeof result[key] === 'object' && typeof val === 'object') {\n\t      result[key] = merge(result[key], val);\n\t    } else {\n\t      result[key] = val;\n\t    }\n\t  }\n\t\n\t  // 遍历每一个参数，调用assignValue\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    forEach(arguments[i], assignValue);\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Function equal to merge with the difference being that no reference\n\t * to original objects is kept.\n\t * 深度合并，它的优势是不会保持原对象的属性的引用\n\t *\n\t * @see merge\n\t * @param {Object} obj1 Object to merge\n\t * @returns {Object} Result of all merge properties\n\t */\n\tfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n\t  var result = {};\n\t  function assignValue(val, key) {\n\t    if (typeof result[key] === 'object' && typeof val === 'object') {\n\t      result[key] = deepMerge(result[key], val);\n\t    } else if (typeof val === 'object') {\n\t      result[key] = deepMerge({}, val);\n\t    } else {\n\t      result[key] = val;\n\t    }\n\t  }\n\t\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    forEach(arguments[i], assignValue);\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * 通过遍历的方式把b上的属性继承给a,如果属性是函数的话，要修改this指向。\n\t *\n\t * @param {Object} a The object to be extended\n\t * @param {Object} b The object to copy properties from\n\t * @param {Object} thisArg The object to bind function to\n\t * @return {Object} The resulting value of object a\n\t */\n\tfunction extend(a, b, thisArg) {\n\t  // 对b对象\b的每一个自有属性（或者b数组的每个元素）分别应用assignValue\n\t  // 传入的参数就是值和健名（或者下标）\n\t  forEach(b, function assignValue(val, key) {\n\t    // 如果值是函数，先把函数this指向绑定到指定的上下文thisArg后再复制。\n\t    if (thisArg && typeof val === 'function') {\n\t      a[key] = bind(val, thisArg);\n\t    } else {\n\t      a[key] = val;\n\t    }\n\t  });\n\t  return a;\n\t}\n\t\n\tmodule.exports = {\n\t  isArray: isArray,\n\t  isArrayBuffer: isArrayBuffer,\n\t  isBuffer: isBuffer,\n\t  isFormData: isFormData,\n\t  isArrayBufferView: isArrayBufferView,\n\t  isString: isString,\n\t  isNumber: isNumber,\n\t  isObject: isObject,\n\t  isUndefined: isUndefined,\n\t  isDate: isDate,\n\t  isFile: isFile,\n\t  isBlob: isBlob,\n\t  isFunction: isFunction,\n\t  isStream: isStream,\n\t  isURLSearchParams: isURLSearchParams,\n\t  isStandardBrowserEnv: isStandardBrowserEnv,\n\t  forEach: forEach,\n\t  merge: merge,\n\t  deepMerge: deepMerge,\n\t  extend: extend,\n\t  trim: trim\n\t};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\t/**\n\t * 自定义bind函数\n\t * @param {*} fn 要绑定this的函数\n\t * @param {*} thisArg 上下文参数\n\t * @returns 包装函数wrap\n\t */\n\tmodule.exports = function bind(fn, thisArg) {\n\t  return function wrap() {\n\t    // 创建类数组arguments的数组副本\n\t    var args = new Array(arguments.length);\n\t    for (var i = 0; i < args.length; i++) {\n\t      args[i] = arguments[i];\n\t    }\n\t    // this绑定\n\t    return fn.apply(thisArg, args);\n\t  };\n\t};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t// 构建URL\n\tvar buildURL = __webpack_require__(5);\n\t// 拦截器管理器\n\tvar InterceptorManager = __webpack_require__(6);\n\t// 派发请求\n\tvar dispatchRequest = __webpack_require__(7);\n\tvar mergeConfig = __webpack_require__(22);\n\t\n\t/**\n\t * Axios构造器，它只有defaults和interceptors这两个对象属性\n\t *\n\t * @param {Object} instanceConfig 实例的默认配置\n\t */\n\tfunction Axios(instanceConfig) {\n\t  // 默认配置暂存到defaults\n\t  this.defaults = instanceConfig;\n\t  // 拦截器对象，分为request和response，值都是InterceptorManager实例\n\t  // InterceptorManager实例上有实例属性handlers，以及use、eject、forEach三个原型方法\n\t  this.interceptors = {\n\t    request: new InterceptorManager(),\n\t    response: new InterceptorManager()\n\t  };\n\t}\n\t\n\t/**\n\t * 添加原型方法request\n\t *\n\t * @param {Object} config 参数为请求配置项，它之后会和默认配置合并\n\t */\n\tAxios.prototype.request = function request(config) {\n\t  /*eslint no-param-reassign:0*/\n\t  // Allow for axios('example/url'[, config]) a la fetch API\n\t  // 考虑到第一个参数是url的情况，判断如果第一个参数是字符串，那就取第二个参数为config\n\t  // 如果第二个参数没有，就默认config为{}\n\t  if (typeof config === 'string') {\n\t    config = arguments[1] || {};\n\t    // 把url的属性值补上\n\t    config.url = arguments[0];\n\t  } else {\n\t    config = config || {};\n\t  }\n\t\n\t  // 与默认配置合并（对于配置项的各个属性，它有不同的合并规则，需要看mergeConfig）\n\t  config = mergeConfig(this.defaults, config);\n\t\n\t  // 设置config.method属性，如果有，统一转为小写\n\t  // 如果没有，使用默认配置中的值，也要转为小写\n\t  // 如果默认配置中也没有，就使用get作为默认值\n\t  if (config.method) {\n\t    config.method = config.method.toLowerCase();\n\t  } else if (this.defaults.method) {\n\t    config.method = this.defaults.method.toLowerCase();\n\t  } else {\n\t    config.method = 'get';\n\t  }\n\t\n\t  // Hook up interceptors middleware\n\t  // 初始的连接拦截器中间件\n\t  // dispatchRequest是一个派发请求的函数\n\t  var chain = [dispatchRequest, undefined];\n\t  // 对于Promise.resolve()传入的参数，如果参数是thenable对象，它会转为已完成的promise实例，并立即执行thenable的then方法\n\t  // 如果参数是一个promise，直接穿过\n\t  // 如果是一个普通的参数，它会变成一个已完成的promise，参数config会传给then\n\t  // 那这里config它是一个普通对象，所以返回一个已完成的promise\n\t  var promise = Promise.resolve(config);\n\t\n\t  // 对请求拦截器的handles遍历，应用unshiftRequestInterceptors方法\n\t  // handles的每一项都包含了fulfilled和rejected属性，它们是promise成功和失败的回调函数\n\t  // 将这两个属性从头部加到chain数组中\n\t  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n\t    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n\t  });\n\t\n\t  // 同上面类似，这是将响应拦截器的handles的每一项的fulfilled和rejected方法都从尾部加到chain数组中\n\t  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n\t    chain.push(interceptor.fulfilled, interceptor.rejected);\n\t  });\n\t\n\t  // 从chain的头部取出2项，作为promise.then()的参数\n\t  // 只要存在chain，这段代码就会一直执行\n\t  while (chain.length) {\n\t    promise = promise.then(chain.shift(), chain.shift());\n\t  }\n\t\n\t  return promise;\n\t};\n\t\n\t// 获取uri\n\tAxios.prototype.getUri = function getUri(config) {\n\t  // 首先合并配置项\n\t  config = mergeConfig(this.defaults, config);\n\t  // 要先看buildURL方法\n\t  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n\t};\n\t\n\t// 遍历添加这4个快捷方法，它们的参数是url和配置项，而method是预先指定好的\n\t// 用到了utils.merge方法，用于合并配置项\n\tutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n\t  /*eslint func-names:0*/\n\t  Axios.prototype[method] = function(url, config) {\n\t    return this.request(utils.merge(config || {}, {\n\t      method: method,\n\t      url: url\n\t    }));\n\t  };\n\t});\n\t\n\t// 遍历添加3个方法，它们接收url, data, config3个参数\n\tutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n\t  /*eslint func-names:0*/\n\t  Axios.prototype[method] = function(url, data, config) {\n\t    return this.request(utils.merge(config || {}, {\n\t      method: method,\n\t      url: url,\n\t      data: data\n\t    }));\n\t  };\n\t});\n\t\n\tmodule.exports = Axios;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tfunction encode(val) {\n\t  // 字符转码\n\t  return encodeURIComponent(val).\n\t    replace(/%40/gi, '@').\n\t    replace(/%3A/gi, ':').\n\t    replace(/%24/g, '$').\n\t    replace(/%2C/gi, ',').\n\t    replace(/%20/g, '+'). // 空格变+\n\t    replace(/%5B/gi, '[').\n\t    replace(/%5D/gi, ']');\n\t}\n\t\n\t/**\n\t * Build a URL by appending params to the end\n\t *\n\t * @param {string} url The base of the url (e.g., http://www.google.com)\n\t * @param {object} [params] The params to be appended\n\t * @returns {string} The formatted url\n\t */\n\tmodule.exports = function buildURL(url, params, paramsSerializer) {\n\t  /*eslint no-param-reassign:0*/\n\t  // 参数不存在，直接返回url\n\t  if (!params) {\n\t    return url;\n\t  }\n\t\n\t  var serializedParams;\n\t  // 如果存在参数序列化器\n\t  if (paramsSerializer) {\n\t    // 序列化器调用结果作为序列化后的参数\n\t    serializedParams = paramsSerializer(params);\n\t    // 如果参数是URLSearchParams的实例\n\t  } else if (utils.isURLSearchParams(params)) {\n\t    // 调用URLSearchParams的实例的toString()方法可以重新转为字符串\n\t    // 比如`a=1&b=2&c=3`\n\t    serializedParams = params.toString();\n\t  } else {\n\t    // 空数组，用于存放查询参数片段，每一项的格式是：`a=1`这样\n\t    var parts = [];\n\t\n\t    // 对params对象对每一个属性，遍历调用serialize方法\n\t    utils.forEach(params, function serialize(val, key) {\n\t      if (val === null || typeof val === 'undefined') {\n\t        return;\n\t      }\n\t      // 如果值是数组，键名后面跟`[]`\n\t      if (utils.isArray(val)) {\n\t        key = key + '[]';\n\t      } else {\n\t        // 否则的话，用`[]`把value包裹起来\n\t        // 这样就确保了所有的值都是数组，方便下面代码遍历\n\t        val = [val];\n\t      }\n\t\n\t      utils.forEach(val, function parseValue(v) {\n\t        // 如果是日期对象，将它转为iso标准的日期字符串\n\t        if (utils.isDate(v)) {\n\t          v = v.toISOString();\n\t          // 如果是对象，调用JSON.stringify\n\t        } else if (utils.isObject(v)) {\n\t          v = JSON.stringify(v);\n\t        }\n\t        // 最后对键名调用字符转码方法，然后拼接参数后推到parts数组中\n\t        parts.push(encode(key) + '=' + encode(v));\n\t      });\n\t    });\n\t    // 获得序列化后的参数字符串，是这种格式：`a=1&b=2&c=3`\n\t    serializedParams = parts.join('&');\n\t  }\n\t\n\t  // 如果有序列化参数\n\t  if (serializedParams) {\n\t    // 如果有hash标志#，截取#前面的内容作为url\n\t    var hashmarkIndex = url.indexOf('#');\n\t    if (hashmarkIndex !== -1) {\n\t      url = url.slice(0, hashmarkIndex);\n\t    }\n\t    // 把序列化参数和url拼接在一起\n\t    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n\t  }\n\t\n\t  return url;\n\t};\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t// 实例属性handlers\n\tfunction InterceptorManager() {\n\t  this.handlers = [];\n\t}\n\t\n\t/**\n\t * Add a new interceptor to the stack\n\t * 原型方法use\n\t *\n\t * @param {Function} fulfilled The function to handle `then` for a `Promise`\n\t * @param {Function} rejected The function to handle `reject` for a `Promise`\n\t *\n\t * @return {Number} An ID used to remove interceptor later\n\t */\n\tInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n\t  // handlers数组中推入一个包含fulfilled和rejected方法的对象，这个对象就是拦截器\n\t  // 这2个方法是promise完成和拒绝的2个回调函数\n\t  this.handlers.push({\n\t    fulfilled: fulfilled,\n\t    rejected: rejected\n\t  });\n\t  // 返回值是最新推入的这个对象在数组中的下标\n\t  return this.handlers.length - 1;\n\t};\n\t\n\t/**\n\t * 原型方法eject，将指定下标的拦截器从handles中删除，内容置为null，下标的位置还是保留的\n\t * Remove an interceptor from the stack\n\t *\n\t * @param {Number} id The ID that was returned by `use`\n\t */\n\tInterceptorManager.prototype.eject = function eject(id) {\n\t  if (this.handlers[id]) {\n\t    this.handlers[id] = null;\n\t  }\n\t};\n\t\n\t/**\n\t * Iterate over all the registered interceptors\n\t * 原型方法forEach\n\t *\n\t * This method is particularly useful for skipping over any\n\t * interceptors that may have become `null` calling `eject`.\n\t *\n\t * @param {Function} fn The function to call for each interceptor\n\t */\n\tInterceptorManager.prototype.forEach = function forEach(fn) {\n\t  // 对handlers的每一个拦截器，应用forEachHandler方法。\n\t  // 调用fn()方法，拦截器作为参数传入\n\t  utils.forEach(this.handlers, function forEachHandler(h) {\n\t    if (h !== null) {\n\t      fn(h);\n\t    }\n\t  });\n\t};\n\t\n\tmodule.exports = InterceptorManager;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\tvar transformData = __webpack_require__(8);\n\tvar isCancel = __webpack_require__(9);\n\tvar defaults = __webpack_require__(10);\n\t\n\t/**\n\t * Throws a `Cancel` if cancellation has been requested.\n\t */\n\tfunction throwIfCancellationRequested(config) {\n\t  // 如果配置项中有cancelToken参数，说明cancel已经执行过了，抛出异常。\n\t  if (config.cancelToken) {\n\t    config.cancelToken.throwIfRequested();\n\t  }\n\t}\n\t\n\t/**\n\t * Dispatch a request to the server using the configured adapter.\n\t *\n\t * @param {object} config The config that is to be used for the request\n\t * @returns {Promise} The Promise to be fulfilled\n\t */\n\tmodule.exports = function dispatchRequest(config) {\n\t  throwIfCancellationRequested(config);\n\t\n\t  // Ensure headers exist\n\t  // config.headers如果不存在设默认值{}\n\t  config.headers = config.headers || {};\n\t\n\t  // Transform request data\n\t  // 转换请求数据\n\t  config.data = transformData(\n\t    config.data,\n\t    config.headers,\n\t    config.transformRequest\n\t  );\n\t\n\t  // Flatten headers\n\t  // 合并请求头配置，对于指定的方法的请求头，把它展开后合并\n\t  config.headers = utils.merge(\n\t    config.headers.common || {},\n\t    config.headers[config.method] || {},\n\t    config.headers\n\t  );\n\t\n\t  // 遍历删除各个特定方法的header配置项，因为上面一段代码已经把该合并的合并了\n\t  utils.forEach(\n\t    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n\t    function cleanHeaderConfig(method) {\n\t      delete config.headers[method];\n\t    }\n\t  );\n\t\n\t  // 获取适配器，优先使用配置里的，如果没有，使用默认的\n\t  var adapter = config.adapter || defaults.adapter;\n\t\n\t  // 返回适配器的调用结果，是个promise。config作为参数传入。\n\t  // then的两个参数是resolve和reject回调。\n\t  return adapter(config).then(function onAdapterResolution(response) {\n\t    // 如果已经取消就抛出异常\n\t    throwIfCancellationRequested(config);\n\t\n\t    // 转换响应数据\n\t    response.data = transformData(\n\t      response.data,\n\t      response.headers,\n\t      config.transformResponse\n\t    );\n\t\n\t    return response;\n\t  }, function onAdapterRejection(reason) {\n\t    // 如果已取消，抛出异常\n\t    if (!isCancel(reason)) {\n\t      throwIfCancellationRequested(config);\n\t\n\t      // 转换响应数据\n\t      if (reason && reason.response) {\n\t        reason.response.data = transformData(\n\t          reason.response.data,\n\t          reason.response.headers,\n\t          config.transformResponse\n\t        );\n\t      }\n\t    }\n\t\n\t    return Promise.reject(reason);\n\t  });\n\t};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t/**\n\t * 转换请求或响应的数据data\n\t *\n\t * @param {Object|String} data The data to be transformed\n\t * @param {Array} headers The headers for the request or response\n\t * @param {Array|Function} fns fns可以是一个函数，也可以是函数数组\n\t * @returns {*} The resulting transformed data\n\t */\n\tmodule.exports = function transformData(data, headers, fns) {\n\t  /*eslint no-param-reassign:0*/\n\t  // 遍历应用fns\n\t  utils.forEach(fns, function transform(fn) {\n\t    data = fn(data, headers);\n\t  });\n\t\n\t  return data;\n\t};\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t// 通过实例的__CANCEL__属性判断是否已取消\n\tmodule.exports = function isCancel(value) {\n\t  return !!(value && value.__CANCEL__);\n\t};\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t// 用于格式化请求头名称的\n\tvar normalizeHeaderName = __webpack_require__(11);\n\t\n\t// 默认请求头类型，在xhr中如果是post请求，这个请求头是必需的\n\tvar DEFAULT_CONTENT_TYPE = {\n\t  'Content-Type': 'application/x-www-form-urlencoded'\n\t};\n\t\n\t// 设置请求头ContentType，如果没有设的话\n\tfunction setContentTypeIfUnset(headers, value) {\n\t  // headers对象存在，但是headers['Content-Type']不存在的话，设置该值\n\t  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n\t    headers['Content-Type'] = value;\n\t  }\n\t}\n\t\n\t// 获取默认的适配器，浏览器使用xhr适配器，node环境使用http适配器\n\tfunction getDefaultAdapter() {\n\t  var adapter;\n\t  if (typeof XMLHttpRequest !== 'undefined') {\n\t    // For browsers use XHR adapter\n\t    adapter = __webpack_require__(12);\n\t  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n\t    // For node use HTTP adapter\n\t    adapter = __webpack_require__(12);\n\t  }\n\t  return adapter;\n\t}\n\t\n\t// 设置defaults对象\n\tvar defaults = {\n\t  // 适配器属性adapter\n\t  adapter: getDefaultAdapter(),\n\t  // transformRequest值的每一个fn都会被调用且接收两个参数（data, headers）\n\t  // 这里这个默认函数的功能是：1、格式化请求头名称 2、根据不同的data类型做一些对应的处理\n\t  transformRequest: [function transformRequest(data, headers) {\n\t    normalizeHeaderName(headers, 'Accept');\n\t    normalizeHeaderName(headers, 'Content-Type');\n\t    if (utils.isFormData(data) ||\n\t      utils.isArrayBuffer(data) ||\n\t      utils.isBuffer(data) ||\n\t      utils.isStream(data) ||\n\t      utils.isFile(data) ||\n\t      utils.isBlob(data)\n\t    ) {\n\t      return data;\n\t    }\n\t    if (utils.isArrayBufferView(data)) {\n\t      return data.buffer;\n\t    }\n\t    if (utils.isURLSearchParams(data)) {\n\t      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n\t      return data.toString();\n\t    }\n\t    if (utils.isObject(data)) {\n\t      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n\t      return JSON.stringify(data);\n\t    }\n\t    return data;\n\t  }],\n\t  // transformResponse的值的每一个函数都会被调用\n\t  // 这里默认的函数它的功能是如果data是字符串，尝试转成json\n\t  transformResponse: [function transformResponse(data) {\n\t    /*eslint no-param-reassign:0*/\n\t    if (typeof data === 'string') {\n\t      try {\n\t        data = JSON.parse(data);\n\t      } catch (e) { /* Ignore */ }\n\t    }\n\t    return data;\n\t  }],\n\t\n\t  /**\n\t   * 超时时间\n\t   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n\t   * timeout is not created.\n\t   */\n\t  timeout: 0,\n\t  // 要用作 xsrf 令牌的值的cookie的名称\n\t  xsrfCookieName: 'XSRF-TOKEN',\n\t  // 携带xsrf令牌值的http头的名称\n\t  xsrfHeaderName: 'X-XSRF-TOKEN',\n\t\n\t  // 允许的http响应内容的最大值\n\t  maxContentLength: -1,\n\t  // 正文最大值\n\t  maxBodyLength: -1,\n\t\n\t  // 请求成功的状态码默认是>=200且小于300，如果需要修改，可以配置这个validateStatus属性\n\t  validateStatus: function validateStatus(status) {\n\t    return status >= 200 && status < 300;\n\t  }\n\t};\n\t\n\t\n\tdefaults.headers = {\n\t  // 通用的请求头是Accept\n\t  common: {\n\t    'Accept': 'application/json, text/plain, */*'\n\t  }\n\t};\n\t\n\t// 这三种类型的请求，它们对应的默认请求头是{}\n\tutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n\t  defaults.headers[method] = {};\n\t});\n\t\n\t// 而'post', 'put', 'patch'这三种的默认请求头中需\n\t// 包含'Content-Type': 'application/x-www-form-urlencoded'\n\tutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n\t  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n\t});\n\tmodule.exports = defaults;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t// 参数有2个，headers是数组，normalizedName是字符串\n\t// 遍历数组的每一项，对它们应用processHeader方法\n\tmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n\t  utils.forEach(headers, function processHeader(value, name) {\n\t    // 如果name不等于normalizedName，但它们小写后的结果又是相等的\n\t    // 就把headers[name]改成headers[normalizedName]\n\t    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n\t      headers[normalizedName] = value;\n\t      delete headers[name];\n\t    }\n\t  });\n\t};\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\tvar settle = __webpack_require__(13);\n\tvar buildURL = __webpack_require__(5);\n\tvar buildFullPath = __webpack_require__(16);\n\tvar parseHeaders = __webpack_require__(19);\n\tvar isURLSameOrigin = __webpack_require__(20);\n\tvar createError = __webpack_require__(14);\n\t\n\tmodule.exports = function xhrAdapter(config) {\n\t  return new Promise(function dispatchXhrRequest(resolve, reject) {\n\t    var requestData = config.data;\n\t    var requestHeaders = config.headers;\n\t\n\t    if (utils.isFormData(requestData)) {\n\t      delete requestHeaders['Content-Type']; // Let the browser set it\n\t    }\n\t\n\t    var request = new XMLHttpRequest();\n\t\n\t    // HTTP basic authentication\n\t    if (config.auth) {\n\t      var username = config.auth.username || '';\n\t      var password = config.auth.password || '';\n\t      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n\t    }\n\t\n\t    var fullPath = buildFullPath(config.baseURL, config.url);\n\t    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\t\n\t    // Set the request timeout in MS\n\t    request.timeout = config.timeout;\n\t\n\t    // Listen for ready state\n\t    request.onreadystatechange = function handleLoad() {\n\t      if (!request || request.readyState !== 4) {\n\t        return;\n\t      }\n\t\n\t      // The request errored out and we didn't get a response, this will be\n\t      // handled by onerror instead\n\t      // With one exception: request that using file: protocol, most browsers\n\t      // will return status as 0 even though it's a successful request\n\t      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n\t        return;\n\t      }\n\t\n\t      // Prepare the response\n\t      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n\t      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n\t      var response = {\n\t        data: responseData,\n\t        status: request.status,\n\t        statusText: request.statusText,\n\t        headers: responseHeaders,\n\t        config: config,\n\t        request: request\n\t      };\n\t\n\t      settle(resolve, reject, response);\n\t\n\t      // Clean up request\n\t      request = null;\n\t    };\n\t\n\t    // Handle browser request cancellation (as opposed to a manual cancellation)\n\t    request.onabort = function handleAbort() {\n\t      if (!request) {\n\t        return;\n\t      }\n\t\n\t      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\t\n\t      // Clean up request\n\t      request = null;\n\t    };\n\t\n\t    // Handle low level network errors\n\t    request.onerror = function handleError() {\n\t      // Real errors are hidden from us by the browser\n\t      // onerror should only fire if it's a network error\n\t      reject(createError('Network Error', config, null, request));\n\t\n\t      // Clean up request\n\t      request = null;\n\t    };\n\t\n\t    // Handle timeout\n\t    request.ontimeout = function handleTimeout() {\n\t      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n\t      if (config.timeoutErrorMessage) {\n\t        timeoutErrorMessage = config.timeoutErrorMessage;\n\t      }\n\t      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n\t        request));\n\t\n\t      // Clean up request\n\t      request = null;\n\t    };\n\t\n\t    // Add xsrf header\n\t    // This is only done if running in a standard browser environment.\n\t    // Specifically not if we're in a web worker, or react-native.\n\t    if (utils.isStandardBrowserEnv()) {\n\t      var cookies = __webpack_require__(21);\n\t\n\t      // Add xsrf header\n\t      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n\t        cookies.read(config.xsrfCookieName) :\n\t        undefined;\n\t\n\t      if (xsrfValue) {\n\t        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n\t      }\n\t    }\n\t\n\t    // Add headers to the request\n\t    if ('setRequestHeader' in request) {\n\t      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n\t        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n\t          // Remove Content-Type if data is undefined\n\t          delete requestHeaders[key];\n\t        } else {\n\t          // Otherwise add header to the request\n\t          request.setRequestHeader(key, val);\n\t        }\n\t      });\n\t    }\n\t\n\t    // Add withCredentials to request if needed\n\t    if (!utils.isUndefined(config.withCredentials)) {\n\t      request.withCredentials = !!config.withCredentials;\n\t    }\n\t\n\t    // Add responseType to request if needed\n\t    if (config.responseType) {\n\t      try {\n\t        request.responseType = config.responseType;\n\t      } catch (e) {\n\t        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n\t        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n\t        if (config.responseType !== 'json') {\n\t          throw e;\n\t        }\n\t      }\n\t    }\n\t\n\t    // Handle progress if needed\n\t    if (typeof config.onDownloadProgress === 'function') {\n\t      request.addEventListener('progress', config.onDownloadProgress);\n\t    }\n\t\n\t    // Not all browsers support upload events\n\t    if (typeof config.onUploadProgress === 'function' && request.upload) {\n\t      request.upload.addEventListener('progress', config.onUploadProgress);\n\t    }\n\t\n\t    if (config.cancelToken) {\n\t      // Handle cancellation\n\t      config.cancelToken.promise.then(function onCanceled(cancel) {\n\t        if (!request) {\n\t          return;\n\t        }\n\t\n\t        request.abort();\n\t        reject(cancel);\n\t        // Clean up request\n\t        request = null;\n\t      });\n\t    }\n\t\n\t    if (requestData === undefined) {\n\t      requestData = null;\n\t    }\n\t\n\t    // Send the request\n\t    request.send(requestData);\n\t  });\n\t};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar createError = __webpack_require__(14);\n\t\n\t/**\n\t * 根据validateStatus(response.status)决定到底是resolve还是reject\n\t *\n\t * @param {Function} resolve A function that resolves the promise.\n\t * @param {Function} reject A function that rejects the promise.\n\t * @param {object} response The response.\n\t */\n\tmodule.exports = function settle(resolve, reject, response) {\n\t  // 获取响应的validateStatus方法，它用于定义什么状态码表示成功\n\t  var validateStatus = response.config.validateStatus;\n\t  // response.status或者validateStatus就直接resolve\n\t  // 如果都存在，判断validateStatus(response.status)的结果，再resolve\n\t  if (!response.status || !validateStatus || validateStatus(response.status)) {\n\t    resolve(response);\n\t  } else {\n\t    // reject传入的参数是createError的调用结果\n\t    reject(createError(\n\t      'Request failed with status code ' + response.status,\n\t      response.config,\n\t      null,\n\t      response.request,\n\t      response\n\t    ));\n\t  }\n\t};\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar enhanceError = __webpack_require__(15);\n\t\n\t/**\n\t * Create an Error with the specified message, config, error code, request and response.\n\t * 其实就返回了enhanceError的调用结果，只不过第一个参数传的是err对象\n\t *\n\t * @param {string} message 错误信息\n\t * @param {Object} config The config.\n\t * @param {string} [code] 错误码 (for example, 'ECONNABORTED').\n\t * @param {Object} [request] 请求\n\t * @param {Object} [response] 响应\n\t * @returns {Error} The created error.\n\t */\n\tmodule.exports = function createError(message, config, code, request, response) {\n\t  var error = new Error(message);\n\t  return enhanceError(error, config, code, request, response);\n\t};\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Update an Error with the specified config, error code, and response.\n\t *\n\t * @param {Error} error The error to update.\n\t * @param {Object} config The config.\n\t * @param {string} [code] The error code (for example, 'ECONNABORTED').\n\t * @param {Object} [request] The request.\n\t * @param {Object} [response] The response.\n\t * @returns {Error} The error.\n\t */\n\tmodule.exports = function enhanceError(error, config, code, request, response) {\n\t  // error对象上添加config、code、request、response属性\n\t  error.config = config;\n\t  if (code) {\n\t    error.code = code;\n\t  }\n\t\n\t  error.request = request;\n\t  error.response = response;\n\t  // 设置isAxiosError标志\n\t  error.isAxiosError = true;\n\t\n\t  // 添加toJson方法\n\t  error.toJSON = function toJSON() {\n\t    return {\n\t      // 这两个是Error实例的标准属性\n\t      message: this.message,\n\t      name: this.name,\n\t      // Microsoft\n\t      description: this.description,\n\t      number: this.number,\n\t      // Mozilla\n\t      fileName: this.fileName,\n\t      lineNumber: this.lineNumber,\n\t      columnNumber: this.columnNumber,\n\t      stack: this.stack,\n\t      // Axios\n\t      config: this.config,\n\t      code: this.code\n\t    };\n\t  };\n\t  return error;\n\t};\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar isAbsoluteURL = __webpack_require__(17);\n\tvar combineURLs = __webpack_require__(18);\n\t\n\t/**\n\t * Creates a new URL by combining the baseURL with the requestedURL,\n\t * only when the requestedURL is not already an absolute URL.\n\t * If the requestURL is absolute, this function returns the requestedURL untouched.\n\t *\n\t * @param {string} baseURL The base URL\n\t * @param {string} requestedURL Absolute or relative URL to combine\n\t * @returns {string} The combined full path\n\t */\n\tmodule.exports = function buildFullPath(baseURL, requestedURL) {\n\t  // 如果基本url存在或者requestedURL是相对路径，返回合并后的路径\n\t  // 否则返回requestedURL\n\t  if (baseURL && !isAbsoluteURL(requestedURL)) {\n\t    return combineURLs(baseURL, requestedURL);\n\t  }\n\t  return requestedURL;\n\t};\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * 判断是否是绝对地址\n\t * `协议://`开头或者`//`开头\n\t *\n\t * @param {string} url The URL to test\n\t * @returns {boolean} True if the specified URL is absolute, otherwise false\n\t */\n\tmodule.exports = function isAbsoluteURL(url) {\n\t  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n\t  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n\t  // by any combination of letters, digits, plus, period, or hyphen.\n\t  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n\t};\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * 连接指定的url创建出新的url\n\t * 如果传递了相对url，先将baseUrl结尾的斜杠后的所有字符删除，然后连接一个斜杠，然后再连接删除了开头斜杠的相对url\n\t * 如果没有相对url参数，就直接返回baseUrl\n\t * combineURLs('www.baidu.com/a/b', '/c/d')\n\t * // \"www.baidu.com/a/b/c/d\"\n\t * combineURLs('www.baidu.com/a/b/', '/c/d')\n\t * // \"www.baidu.com/a/b/c/d\"\n\t * combineURLs('www.baidu.com/a/b/', 'c/d')\n\t * // \"www.baidu.com/a/b/c/d\"\n\t *\n\t * @param {string} baseURL The base URL\n\t * @param {string} relativeURL The relative URL\n\t * @returns {string} The combined URL\n\t */\n\tmodule.exports = function combineURLs(baseURL, relativeURL) {\n\t  return relativeURL\n\t    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n\t    : baseURL;\n\t};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t// Headers whose duplicates are ignored by node\n\t// c.f. https://nodejs.org/api/http.html#http_message_headers\n\t// 在node中下面这些请求头的副本会被忽略\n\t// 定义了一个数组来存放这些请求头名称\n\tvar ignoreDuplicateOf = [\n\t  'age', 'authorization', 'content-length', 'content-type', 'etag',\n\t  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n\t  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n\t  'referer', 'retry-after', 'user-agent'\n\t];\n\t\n\t/**\n\t * 把请求头字符串转为数组\n\t *\n\t * ```\n\t * Date: Wed, 27 Aug 2014 08:58:49 GMT\n\t * Content-Type: application/json\n\t * Connection: keep-alive\n\t * Transfer-Encoding: chunked\n\t * ```\n\t *\n\t * @param {String} headers Headers needing to be parsed\n\t * @returns {Object} Headers parsed into an object\n\t */\n\tmodule.exports = function parseHeaders(headers) {\n\t  // 结果对象\n\t  var parsed = {};\n\t  var key;\n\t  var val;\n\t  var i;\n\t\n\t  if (!headers) { return parsed; }\n\t\n\t  // 请求头字符串通过`\\n`分隔转为数组，遍历每一项，`:`前面对转为小写作为key,后面的作为val\n\t  utils.forEach(headers.split('\\n'), function parser(line) {\n\t    i = line.indexOf(':');\n\t    key = utils.trim(line.substr(0, i)).toLowerCase();\n\t    val = utils.trim(line.substr(i + 1));\n\t\n\t    // 如果结果对象中key已经存在，判断它是不是属于重复的要被忽略的\n\t    // 如果是set-cookie，值是需要与原来的值合并的，cookie的值是要以`;`结尾的\n\t    // 最后一种情况，如果值存在，与原值通过`,`相连，如果不存在添加属性及值到结果对象中\n\t    if (key) {\n\t      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n\t        return;\n\t      }\n\t      if (key === 'set-cookie') {\n\t        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n\t      } else {\n\t        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n\t      }\n\t    }\n\t  });\n\t\n\t  return parsed;\n\t};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tmodule.exports = (\n\t  utils.isStandardBrowserEnv() ?\n\t\n\t  // Standard browser envs have full support of the APIs needed to test\n\t  // whether the request URL is of the same origin as current location.\n\t  // 标准浏览器环境，这个功能才是真正支持的\n\t    (function standardBrowserEnv() {\n\t      var msie = /(msie|trident)/i.test(navigator.userAgent);\n\t      // 利用a标签来解析URL\n\t      var urlParsingNode = document.createElement('a');\n\t      var originURL;\n\t\n\t      /**\n\t    * Parse a URL to discover it's components\n\t    *\n\t    * @param {String} url The URL to be parsed\n\t    * @returns {Object}\n\t    */\n\t      function resolveURL(url) {\n\t        var href = url;\n\t\n\t        if (msie) {\n\t        // ie需要同时设置属性和特性\n\t        // IE needs attribute set twice to normalize properties\n\t          urlParsingNode.setAttribute('href', href);\n\t          href = urlParsingNode.href;\n\t        }\n\t\n\t        urlParsingNode.setAttribute('href', href);\n\t\n\t        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n\t        return {\n\t          href: urlParsingNode.href,\n\t          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n\t          host: urlParsingNode.host,\n\t          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n\t          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n\t          hostname: urlParsingNode.hostname,\n\t          port: urlParsingNode.port,\n\t          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n\t            urlParsingNode.pathname :\n\t            '/' + urlParsingNode.pathname\n\t        };\n\t      }\n\t\n\t      originURL = resolveURL(window.location.href);\n\t\n\t      /**\n\t    * Determine if a URL shares the same origin as the current location\n\t    * 判断协议和host都相同的就算它们属于同域\n\t    *\n\t    * @param {String} requestURL The URL to test\n\t    * @returns {boolean} True if URL shares the same origin, otherwise false\n\t    */\n\t      return function isURLSameOrigin(requestURL) {\n\t        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n\t        return (parsed.protocol === originURL.protocol &&\n\t            parsed.host === originURL.host);\n\t      };\n\t    })() :\n\t\n\t  // Non standard browser envs (web workers, react-native) lack needed support.\n\t    // 如果是非标准浏览器环境，该方法直接返回true\n\t    (function nonStandardBrowserEnv() {\n\t      return function isURLSameOrigin() {\n\t        return true;\n\t      };\n\t    })()\n\t);\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tmodule.exports = (\n\t  // 判断是否是标准浏览器环境\n\t  utils.isStandardBrowserEnv() ?\n\t\n\t  // Standard browser envs support document.cookie\n\t  // 如果是标准浏览器环境返回一个对象，包含write、read、remove方法\n\t    (function standardBrowserEnv() {\n\t      return {\n\t        write: function write(name, value, expires, path, domain, secure) {\n\t          var cookie = [];\n\t          // cookie的每一个值都是键值对组合，类似这样`键=值`\n\t          // 先推到数组暂存\n\t          cookie.push(name + '=' + encodeURIComponent(value));\n\t          // 接收时间戳作为expires，再转化成GMT时间，拼接成`expires=GMT时间`推到数组\n\t          if (utils.isNumber(expires)) {\n\t            cookie.push('expires=' + new Date(expires).toGMTString());\n\t          }\n\t          // 设置path\n\t          if (utils.isString(path)) {\n\t            cookie.push('path=' + path);\n\t          }\n\t          // 设置domain\n\t          if (utils.isString(domain)) {\n\t            cookie.push('domain=' + domain);\n\t          }\n\t\n\t          if (secure === true) {\n\t            cookie.push('secure');\n\t          }\n\t          // 最后通过join连接成字符串，每一个值要用`; `分隔。\n\t          document.cookie = cookie.join('; ');\n\t        },\n\t        // 获取cookie\n\t        read: function read(name) {\n\t          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n\t          return (match ? decodeURIComponent(match[3]) : null);\n\t        },\n\t        // 删除cookie\n\t        remove: function remove(name) {\n\t          this.write(name, '', Date.now() - 86400000);\n\t        }\n\t      };\n\t    })() :\n\t\n\t  // Non standard browser env (web workers, react-native) lack needed support.\n\t  // 非标准浏览器环境不支持cookie\n\t    (function nonStandardBrowserEnv() {\n\t      return {\n\t        write: function write() {},\n\t        read: function read() { return null; },\n\t        remove: function remove() {}\n\t      };\n\t    })()\n\t);\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t/**\n\t * 合并了config1和config2到一个新的对象。它把键分为了4种类型，对它们应用不同的合并规则。\n\t *\n\t * @param {Object} config1\n\t * @param {Object} config2\n\t * @returns {Object} New object resulting from merging config2 to config1\n\t */\n\tmodule.exports = function mergeConfig(config1, config2) {\n\t  // eslint-disable-next-line no-param-reassign\n\t  config2 = config2 || {};\n\t  // 结果对象\n\t  var config = {};\n\t\n\t  // 值来自config2的键\n\t  var valueFromConfig2Keys = ['url', 'method', 'data'];\n\t  // 合并深属性的键\n\t  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n\t  // 对config2而言默认的键\n\t  var defaultToConfig2Keys = [\n\t    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n\t    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n\t    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n\t    'maxContentLength', 'maxBodyLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n\t    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n\t  ];\n\t  // 上面是把键类型分成了3类，分别放到3个数组里，然后对这三个数组遍历，应用不同的方法，因为合并方式不一样。\n\t\n\t  // 这部分采用config2中的属性值，只要值不为undefined就使用，不关config1什么事\n\t  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n\t    if (typeof config2[prop] !== 'undefined') {\n\t      config[prop] = config2[prop];\n\t    }\n\t  });\n\t\n\t  // 这部分的属性值可能是对象，需要深拷贝。如果config2中该属性值是对象，\n\t  // 使用config1和config2的该属性值对象合并的深拷贝结果。\n\t  // 如果config2有值且不为undefined，使用config2的值\n\t  // 最后使用config1中该属性的值，如果是对象也是要深拷贝。\n\t  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n\t    // 如果config2中该属性值是对象，结果是config1和config2同名属性深拷贝的合并\n\t    if (utils.isObject(config2[prop])) {\n\t      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n\t    // 如果config2中该属性值不为undefined，就使用config2的该属性值\n\t    } else if (typeof config2[prop] !== 'undefined') {\n\t      config[prop] = config2[prop];\n\t    // if else执行到这里说明config2中该属性值是undefined\n\t    // 如果config1中该属性值是对象，结果是config1中该属性值的深拷贝\n\t    } else if (utils.isObject(config1[prop])) {\n\t      config[prop] = utils.deepMerge(config1[prop]);\n\t    // 如果config1中该属性值存在，就使用该值\n\t    } else if (typeof config1[prop] !== 'undefined') {\n\t      config[prop] = config1[prop];\n\t    }\n\t  });\n\t\n\t  // 这部分的属性值，如果config2中该属性值不为undefined，就使用config2的\n\t  // 否则，如果config1中该属性值不为undefined，就使用config1的。\n\t  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n\t    if (typeof config2[prop] !== 'undefined') {\n\t      config[prop] = config2[prop];\n\t    } else if (typeof config1[prop] !== 'undefined') {\n\t      config[prop] = config1[prop];\n\t    }\n\t  });\n\t\n\t  // 又把这些键数组合并起来\n\t  var axiosKeys = valueFromConfig2Keys\n\t    .concat(mergeDeepPropertiesKeys)\n\t    .concat(defaultToConfig2Keys);\n\t\n\t  // 找到config2中不属于axiosKeys的键，归类到otherKeys数组\n\t  var otherKeys = Object\n\t    .keys(config2)\n\t    .filter(function filterAxiosKeys(key) {\n\t      return axiosKeys.indexOf(key) === -1;\n\t    });\n\t\n\t  // 这部分也是优先采用config2的属性值，其次是config1的属性值\n\t  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n\t    if (typeof config2[prop] !== 'undefined') {\n\t      config[prop] = config2[prop];\n\t    } else if (typeof config1[prop] !== 'undefined') {\n\t      config[prop] = config1[prop];\n\t    }\n\t  });\n\t\n\t  return config;\n\t};\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * A `Cancel` is an object that is thrown when an operation is canceled.\n\t * Cancel构造器\n\t * @class\n\t * @param {string=} message The message.\n\t */\n\tfunction Cancel(message) {\n\t  // 设置实例属性message\n\t  this.message = message;\n\t}\n\t\n\t// 原型上增加toString方法\n\tCancel.prototype.toString = function toString() {\n\t  return 'Cancel' + (this.message ? ': ' + this.message : '');\n\t};\n\t\n\t// 原型属性__CANCEL__为true\n\tCancel.prototype.__CANCEL__ = true;\n\t\n\tmodule.exports = Cancel;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Cancel = __webpack_require__(23);\n\t\n\t/**\n\t * A `CancelToken` is an object that can be used to request cancellation of an operation.\n\t * CancelToken构造器\n\t * @class\n\t * @param {Function} executor 执行器，必须是一个函数\n\t */\n\tfunction CancelToken(executor) {\n\t  if (typeof executor !== 'function') {\n\t    throw new TypeError('executor must be a function.');\n\t  }\n\t\n\t  var resolvePromise;\n\t  // 创建一个promise实例，把它的resolve方法暂存到变量resolvePromise\n\t  this.promise = new Promise(function promiseExecutor(resolve) {\n\t    resolvePromise = resolve;\n\t  });\n\t\n\t  var token = this;\n\t  // 调用执行器，它接收cancel函数作为参数\n\t  // 下面的代码CancelToken.source方法中，创建实例后，cancel方法就会被暴露出来给变量cancel\n\t  executor(function cancel(message) {\n\t    // 如果实例上存在reason，说明已经执行过了\n\t    if (token.reason) {\n\t      // Cancellation has already been requested\n\t      return;\n\t    }\n\t    // 实例化Cancel构造器，暂存为token.reason,作为取消的原因\n\t    token.reason = new Cancel(message);\n\t    // 完成这个promise\n\t    // 把promise的控制权放在executor函数里面\n\t    resolvePromise(token.reason);\n\t  });\n\t}\n\t\n\t/**\n\t * Throws a `Cancel` if cancellation has been requested.\n\t * 如果取消已经被执行过了,直接抛出异常\n\t */\n\tCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n\t  if (this.reason) {\n\t    throw this.reason;\n\t  }\n\t};\n\t\n\t/**\n\t * Returns an object that contains a new `CancelToken` and a function that, when called,\n\t * cancels the `CancelToken`.\n\t * 添加静态方法\n\t */\n\tCancelToken.source = function source() {\n\t  var cancel;\n\t  // 又创建一个新的CancelToken实例\n\t  var token = new CancelToken(function executor(c) {\n\t    // 用cancel将executor方法的变量c的控制权拿出来了\n\t    // 这个c就是上面的`function cancel(message) {}`\n\t    cancel = c;\n\t  });\n\t  return {\n\t    token: token,\n\t    cancel: cancel\n\t  };\n\t};\n\t\n\tmodule.exports = CancelToken;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * 它是一个高阶函数，接收回调作为参数，返回了一个包装函数wrap\n\t * wrap函数接收一个数组作为参数，返回回调函数的调用结果，数组作为参数被传入。\n\t * 因为回调函数是通过fn.apply()方式调用的，所以它实际上是把数组的每一项展开作为回调函数的实参了\n\t * Syntactic sugar for invoking a function and expanding an array for arguments.\n\t *\n\t * Common use case would be to use `Function.prototype.apply`.\n\t *\n\t *  ```js\n\t *  function f(x, y, z) {}\n\t *  var args = [1, 2, 3];\n\t *  f.apply(null, args);\n\t *  ```\n\t *\n\t * With `spread` this example can be re-written.\n\t *\n\t *  ```js\n\t *  spread(function(x, y, z) {})([1, 2, 3]);\n\t *  ```\n\t *\n\t * @param {Function} callback\n\t * @returns {Function}\n\t */\n\tmodule.exports = function spread(callback) {\n\t  return function wrap(arr) {\n\t    return callback.apply(null, arr);\n\t  };\n\t};\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// axios.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 109d507a3bc681fb3aa1","module.exports = require('./lib/axios');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\n// 工具方法\nvar utils = require('./utils');\n// 辅助方法bind，就是自定义bind方法\nvar bind = require('./helpers/bind');\n// 核心代码\nvar Axios = require('./core/Axios');\n// 一个用于合并配置项的方法\nvar mergeConfig = require('./core/mergeConfig');\n// 实例默认配置\nvar defaults = require('./defaults');\n\n/**\n * 用于创建Axios实例\n * 这个实例的核心是Axios.prototype.request方法，经过修正，它的this指向了Axios的实例context\n * 通过两次复制继承，这个实例继承了Axios.prototype上的属性和方法，也继承了context上的属性\n *\n * @param {Object} defaultConfig 实例的默认配置\n * @return {Axios} Axios实例\n */\nfunction createInstance(defaultConfig) {\n  // 创建上下文this\n  var context = new Axios(defaultConfig);\n  // Axios.prototype.request的this强制绑定到context\n  var instance = bind(Axios.prototype.request, context);\n\n  // 遍历axios.prototype上的属性一一继承给instanceinstance，同时如果属性是方法的话，要修正this指向\n  utils.extend(instance, Axios.prototype, context);\n\n  // 遍历上下文上的属性一一继承给实例instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// 根据默认配置创建要被导出的axios实例\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\n// 为实例添加Axios属性，它是Axios构造器的引用\naxios.Axios = Axios;\n\n// Factory for creating new instances\n// 为实例添加create方法，它根据配置项生成一个新的实例\naxios.create = function create(instanceConfig) {\n  // mergeConfig是合并后的配置项\n  // 返回根据新配置生成的axios实例\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\n// 为实例添加取消相关的属性或方法\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\n// 为实例添加all和spread方法\naxios.all = function all(promises) {\n  // 直接使用了Promise.all\n  return Promise.all(promises);\n};\n// 一个高阶函数，入参回调函数，返回参数为数组的包装函数，这个函数使用apply方式调用该回调函数，\n// 同时把数组作为参数传入。所以数组会被展开作为实参传给回调函数\naxios.spread = require('./helpers/spread');\n\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/axios.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * 判断是否是一个数组\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * 判断值是否为undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * 判断是否是一个buffer，通过调用值的构造器上的isBuffer函数判断\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * 判断是否是ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * 判断值是否是一个FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * 判断是否是ArrayBuffer View\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  // 优先使用ArrayBuffer.isView判断\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    // 如果不符合第一个判断条件，判断val.buffer是否是ArrayBuffer的实例\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * 判断是否是一个对象，需要排除null\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * 判断是否是日期对象\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * 判断是否是文件\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * 判断是否是一个Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * 判断是否是一个函数\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * 判断是否是一个Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * 判断是否是一个URLSearchParams实例，URLSearchParams实例提供了一些查询参数相关的方法\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * 去两端空格\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * 判断是否是标准浏览器环境\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * 对数组上的每一个元素，或者对象上的每一个自有属性，遍历调用fn\n * 给fn传三个参数：值、下标（健）、数组（对象）本身\n *\n * @param {Object|Array} obj 对象或数组\n * @param {Function} fn 要调用的函数\n */\nfunction forEach(obj, fn) {\n  // obj不能为null或者undefined\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // 如果不是对象或者数组，转为数组（用[]包裹）\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  // 迭代数组\n  if (isArray(obj)) {\n    // 遍历调用fn,参数为数组的值、下标以及数组本身\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // 迭代对象\n    for (var key in obj) {\n      // 对对象上的每一个自有属性，分别调用fn,传入的参数为值、健、对象本身\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 ... 它接收不限数个对象\n * @returns {Object} 返回多个对象合并的结果\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  // 遍历每一个参数，调用assignValue\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n * 深度合并，它的优势是不会保持原对象的属性的引用\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * 通过遍历的方式把b上的属性继承给a,如果属性是函数的话，要修改this指向。\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  // 对b对象\b的每一个自有属性（或者b数组的每个元素）分别应用assignValue\n  // 传入的参数就是值和健名（或者下标）\n  forEach(b, function assignValue(val, key) {\n    // 如果值是函数，先把函数this指向绑定到指定的上下文thisArg后再复制。\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils.js\n// module id = 2\n// module chunks = 0","'use strict';\n\n\n/**\n * 自定义bind函数\n * @param {*} fn 要绑定this的函数\n * @param {*} thisArg 上下文参数\n * @returns 包装函数wrap\n */\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    // 创建类数组arguments的数组副本\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    // this绑定\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/bind.js\n// module id = 3\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n// 构建URL\nvar buildURL = require('../helpers/buildURL');\n// 拦截器管理器\nvar InterceptorManager = require('./InterceptorManager');\n// 派发请求\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Axios构造器，它只有defaults和interceptors这两个对象属性\n *\n * @param {Object} instanceConfig 实例的默认配置\n */\nfunction Axios(instanceConfig) {\n  // 默认配置暂存到defaults\n  this.defaults = instanceConfig;\n  // 拦截器对象，分为request和response，值都是InterceptorManager实例\n  // InterceptorManager实例上有实例属性handlers，以及use、eject、forEach三个原型方法\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * 添加原型方法request\n *\n * @param {Object} config 参数为请求配置项，它之后会和默认配置合并\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  // 考虑到第一个参数是url的情况，判断如果第一个参数是字符串，那就取第二个参数为config\n  // 如果第二个参数没有，就默认config为{}\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    // 把url的属性值补上\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  // 与默认配置合并（对于配置项的各个属性，它有不同的合并规则，需要看mergeConfig）\n  config = mergeConfig(this.defaults, config);\n\n  // 设置config.method属性，如果有，统一转为小写\n  // 如果没有，使用默认配置中的值，也要转为小写\n  // 如果默认配置中也没有，就使用get作为默认值\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  // 初始的连接拦截器中间件\n  // dispatchRequest是一个派发请求的函数\n  var chain = [dispatchRequest, undefined];\n  // 对于Promise.resolve()传入的参数，如果参数是thenable对象，它会转为已完成的promise实例，并立即执行thenable的then方法\n  // 如果参数是一个promise，直接穿过\n  // 如果是一个普通的参数，它会变成一个已完成的promise，参数config会传给then\n  // 那这里config它是一个普通对象，所以返回一个已完成的promise\n  var promise = Promise.resolve(config);\n\n  // 对请求拦截器的handles遍历，应用unshiftRequestInterceptors方法\n  // handles的每一项都包含了fulfilled和rejected属性，它们是promise成功和失败的回调函数\n  // 将这两个属性从头部加到chain数组中\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  // 同上面类似，这是将响应拦截器的handles的每一项的fulfilled和rejected方法都从尾部加到chain数组中\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  // 从chain的头部取出2项，作为promise.then()的参数\n  // 只要存在chain，这段代码就会一直执行\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// 获取uri\nAxios.prototype.getUri = function getUri(config) {\n  // 首先合并配置项\n  config = mergeConfig(this.defaults, config);\n  // 要先看buildURL方法\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// 遍历添加这4个快捷方法，它们的参数是url和配置项，而method是预先指定好的\n// 用到了utils.merge方法，用于合并配置项\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\n// 遍历添加3个方法，它们接收url, data, config3个参数\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/Axios.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  // 字符转码\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+'). // 空格变+\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  // 参数不存在，直接返回url\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  // 如果存在参数序列化器\n  if (paramsSerializer) {\n    // 序列化器调用结果作为序列化后的参数\n    serializedParams = paramsSerializer(params);\n    // 如果参数是URLSearchParams的实例\n  } else if (utils.isURLSearchParams(params)) {\n    // 调用URLSearchParams的实例的toString()方法可以重新转为字符串\n    // 比如`a=1&b=2&c=3`\n    serializedParams = params.toString();\n  } else {\n    // 空数组，用于存放查询参数片段，每一项的格式是：`a=1`这样\n    var parts = [];\n\n    // 对params对象对每一个属性，遍历调用serialize方法\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n      // 如果值是数组，键名后面跟`[]`\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        // 否则的话，用`[]`把value包裹起来\n        // 这样就确保了所有的值都是数组，方便下面代码遍历\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        // 如果是日期对象，将它转为iso标准的日期字符串\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n          // 如果是对象，调用JSON.stringify\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        // 最后对键名调用字符转码方法，然后拼接参数后推到parts数组中\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n    // 获得序列化后的参数字符串，是这种格式：`a=1&b=2&c=3`\n    serializedParams = parts.join('&');\n  }\n\n  // 如果有序列化参数\n  if (serializedParams) {\n    // 如果有hash标志#，截取#前面的内容作为url\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    // 把序列化参数和url拼接在一起\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/buildURL.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\n// 实例属性handlers\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n * 原型方法use\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  // handlers数组中推入一个包含fulfilled和rejected方法的对象，这个对象就是拦截器\n  // 这2个方法是promise完成和拒绝的2个回调函数\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  // 返回值是最新推入的这个对象在数组中的下标\n  return this.handlers.length - 1;\n};\n\n/**\n * 原型方法eject，将指定下标的拦截器从handles中删除，内容置为null，下标的位置还是保留的\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n * 原型方法forEach\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  // 对handlers的每一个拦截器，应用forEachHandler方法。\n  // 调用fn()方法，拦截器作为参数传入\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/InterceptorManager.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  // 如果配置项中有cancelToken参数，说明cancel已经执行过了，抛出异常。\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  // config.headers如果不存在设默认值{}\n  config.headers = config.headers || {};\n\n  // Transform request data\n  // 转换请求数据\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  // 合并请求头配置，对于指定的方法的请求头，把它展开后合并\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  // 遍历删除各个特定方法的header配置项，因为上面一段代码已经把该合并的合并了\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  // 获取适配器，优先使用配置里的，如果没有，使用默认的\n  var adapter = config.adapter || defaults.adapter;\n\n  // 返回适配器的调用结果，是个promise。config作为参数传入。\n  // then的两个参数是resolve和reject回调。\n  return adapter(config).then(function onAdapterResolution(response) {\n    // 如果已经取消就抛出异常\n    throwIfCancellationRequested(config);\n\n    // 转换响应数据\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    // 如果已取消，抛出异常\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // 转换响应数据\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/dispatchRequest.js\n// module id = 7\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * 转换请求或响应的数据data\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns fns可以是一个函数，也可以是函数数组\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  // 遍历应用fns\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/transformData.js\n// module id = 8\n// module chunks = 0","'use strict';\n// 通过实例的__CANCEL__属性判断是否已取消\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cancel/isCancel.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nvar utils = require('./utils');\n// 用于格式化请求头名称的\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\n// 默认请求头类型，在xhr中如果是post请求，这个请求头是必需的\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// 设置请求头ContentType，如果没有设的话\nfunction setContentTypeIfUnset(headers, value) {\n  // headers对象存在，但是headers['Content-Type']不存在的话，设置该值\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\n// 获取默认的适配器，浏览器使用xhr适配器，node环境使用http适配器\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\n// 设置defaults对象\nvar defaults = {\n  // 适配器属性adapter\n  adapter: getDefaultAdapter(),\n  // transformRequest值的每一个fn都会被调用且接收两个参数（data, headers）\n  // 这里这个默认函数的功能是：1、格式化请求头名称 2、根据不同的data类型做一些对应的处理\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n  // transformResponse的值的每一个函数都会被调用\n  // 这里默认的函数它的功能是如果data是字符串，尝试转成json\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * 超时时间\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  // 要用作 xsrf 令牌的值的cookie的名称\n  xsrfCookieName: 'XSRF-TOKEN',\n  // 携带xsrf令牌值的http头的名称\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  // 允许的http响应内容的最大值\n  maxContentLength: -1,\n  // 正文最大值\n  maxBodyLength: -1,\n\n  // 请求成功的状态码默认是>=200且小于300，如果需要修改，可以配置这个validateStatus属性\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\n\ndefaults.headers = {\n  // 通用的请求头是Accept\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\n// 这三种类型的请求，它们对应的默认请求头是{}\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\n// 而'post', 'put', 'patch'这三种的默认请求头中需\n// 包含'Content-Type': 'application/x-www-form-urlencoded'\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\nmodule.exports = defaults;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 10\n// module chunks = 0","'use strict';\n\nvar utils = require('../utils');\n\n// 参数有2个，headers是数组，normalizedName是字符串\n// 遍历数组的每一项，对它们应用processHeader方法\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    // 如果name不等于normalizedName，但它们小写后的结果又是相等的\n    // 就把headers[name]改成headers[normalizedName]\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/normalizeHeaderName.js\n// module id = 11\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/adapters/xhr.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * 根据validateStatus(response.status)决定到底是resolve还是reject\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  // 获取响应的validateStatus方法，它用于定义什么状态码表示成功\n  var validateStatus = response.config.validateStatus;\n  // response.status或者validateStatus就直接resolve\n  // 如果都存在，判断validateStatus(response.status)的结果，再resolve\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    // reject传入的参数是createError的调用结果\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/settle.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n * 其实就返回了enhanceError的调用结果，只不过第一个参数传的是err对象\n *\n * @param {string} message 错误信息\n * @param {Object} config The config.\n * @param {string} [code] 错误码 (for example, 'ECONNABORTED').\n * @param {Object} [request] 请求\n * @param {Object} [response] 响应\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/createError.js\n// module id = 14\n// module chunks = 0","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  // error对象上添加config、code、request、response属性\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  // 设置isAxiosError标志\n  error.isAxiosError = true;\n\n  // 添加toJson方法\n  error.toJSON = function toJSON() {\n    return {\n      // 这两个是Error实例的标准属性\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/enhanceError.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  // 如果基本url存在或者requestedURL是相对路径，返回合并后的路径\n  // 否则返回requestedURL\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/buildFullPath.js\n// module id = 16\n// module chunks = 0","'use strict';\n\n/**\n * 判断是否是绝对地址\n * `协议://`开头或者`//`开头\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/isAbsoluteURL.js\n// module id = 17\n// module chunks = 0","'use strict';\n\n/**\n * 连接指定的url创建出新的url\n * 如果传递了相对url，先将baseUrl结尾的斜杠后的所有字符删除，然后连接一个斜杠，然后再连接删除了开头斜杠的相对url\n * 如果没有相对url参数，就直接返回baseUrl\n * combineURLs('www.baidu.com/a/b', '/c/d')\n * // \"www.baidu.com/a/b/c/d\"\n * combineURLs('www.baidu.com/a/b/', '/c/d')\n * // \"www.baidu.com/a/b/c/d\"\n * combineURLs('www.baidu.com/a/b/', 'c/d')\n * // \"www.baidu.com/a/b/c/d\"\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/combineURLs.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\n// 在node中下面这些请求头的副本会被忽略\n// 定义了一个数组来存放这些请求头名称\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * 把请求头字符串转为数组\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  // 结果对象\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  // 请求头字符串通过`\\n`分隔转为数组，遍历每一项，`:`前面对转为小写作为key,后面的作为val\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    // 如果结果对象中key已经存在，判断它是不是属于重复的要被忽略的\n    // 如果是set-cookie，值是需要与原来的值合并的，cookie的值是要以`;`结尾的\n    // 最后一种情况，如果值存在，与原值通过`,`相连，如果不存在添加属性及值到结果对象中\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/parseHeaders.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  // 标准浏览器环境，这个功能才是真正支持的\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      // 利用a标签来解析URL\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // ie需要同时设置属性和特性\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    * 判断协议和host都相同的就算它们属于同域\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    // 如果是非标准浏览器环境，该方法直接返回true\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/isURLSameOrigin.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  // 判断是否是标准浏览器环境\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  // 如果是标准浏览器环境返回一个对象，包含write、read、remove方法\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          // cookie的每一个值都是键值对组合，类似这样`键=值`\n          // 先推到数组暂存\n          cookie.push(name + '=' + encodeURIComponent(value));\n          // 接收时间戳作为expires，再转化成GMT时间，拼接成`expires=GMT时间`推到数组\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n          // 设置path\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n          // 设置domain\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n          // 最后通过join连接成字符串，每一个值要用`; `分隔。\n          document.cookie = cookie.join('; ');\n        },\n        // 获取cookie\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n        // 删除cookie\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  // 非标准浏览器环境不支持cookie\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/cookies.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * 合并了config1和config2到一个新的对象。它把键分为了4种类型，对它们应用不同的合并规则。\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  // 结果对象\n  var config = {};\n\n  // 值来自config2的键\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  // 合并深属性的键\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  // 对config2而言默认的键\n  var defaultToConfig2Keys = [\n    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n    'maxContentLength', 'maxBodyLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  // 上面是把键类型分成了3类，分别放到3个数组里，然后对这三个数组遍历，应用不同的方法，因为合并方式不一样。\n\n  // 这部分采用config2中的属性值，只要值不为undefined就使用，不关config1什么事\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  // 这部分的属性值可能是对象，需要深拷贝。如果config2中该属性值是对象，\n  // 使用config1和config2的该属性值对象合并的深拷贝结果。\n  // 如果config2有值且不为undefined，使用config2的值\n  // 最后使用config1中该属性的值，如果是对象也是要深拷贝。\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    // 如果config2中该属性值是对象，结果是config1和config2同名属性深拷贝的合并\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    // 如果config2中该属性值不为undefined，就使用config2的该属性值\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    // if else执行到这里说明config2中该属性值是undefined\n    // 如果config1中该属性值是对象，结果是config1中该属性值的深拷贝\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    // 如果config1中该属性值存在，就使用该值\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  // 这部分的属性值，如果config2中该属性值不为undefined，就使用config2的\n  // 否则，如果config1中该属性值不为undefined，就使用config1的。\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  // 又把这些键数组合并起来\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys);\n\n  // 找到config2中不属于axiosKeys的键，归类到otherKeys数组\n  var otherKeys = Object\n    .keys(config2)\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  // 这部分也是优先采用config2的属性值，其次是config1的属性值\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/mergeConfig.js\n// module id = 22\n// module chunks = 0","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n * Cancel构造器\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  // 设置实例属性message\n  this.message = message;\n}\n\n// 原型上增加toString方法\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\n// 原型属性__CANCEL__为true\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cancel/Cancel.js\n// module id = 23\n// module chunks = 0","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n * CancelToken构造器\n * @class\n * @param {Function} executor 执行器，必须是一个函数\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  // 创建一个promise实例，把它的resolve方法暂存到变量resolvePromise\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  // 调用执行器，它接收cancel函数作为参数\n  // 下面的代码CancelToken.source方法中，创建实例后，cancel方法就会被暴露出来给变量cancel\n  executor(function cancel(message) {\n    // 如果实例上存在reason，说明已经执行过了\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n    // 实例化Cancel构造器，暂存为token.reason,作为取消的原因\n    token.reason = new Cancel(message);\n    // 完成这个promise\n    // 把promise的控制权放在executor函数里面\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n * 如果取消已经被执行过了,直接抛出异常\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n * 添加静态方法\n */\nCancelToken.source = function source() {\n  var cancel;\n  // 又创建一个新的CancelToken实例\n  var token = new CancelToken(function executor(c) {\n    // 用cancel将executor方法的变量c的控制权拿出来了\n    // 这个c就是上面的`function cancel(message) {}`\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cancel/CancelToken.js\n// module id = 24\n// module chunks = 0","'use strict';\n\n/**\n * 它是一个高阶函数，接收回调作为参数，返回了一个包装函数wrap\n * wrap函数接收一个数组作为参数，返回回调函数的调用结果，数组作为参数被传入。\n * 因为回调函数是通过fn.apply()方式调用的，所以它实际上是把数组的每一项展开作为回调函数的实参了\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/spread.js\n// module id = 25\n// module chunks = 0"],"sourceRoot":""}